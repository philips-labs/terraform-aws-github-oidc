name: "Terraform checks"
on:
  push:
    branches:
      - main
  pull_request:
    paths-ignore:
      - "*.md"

jobs:
  verify_module:
    name: Verify module
    strategy:
      matrix:
        terraform: [1.1.6, "latest"]
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:${{ matrix.terraform }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: terraform init
        run: terraform init -get -backend=false -input=false
      - if: contains(matrix.terraform, '1.1.')
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
      - if: contains(matrix.terraform, 'latest') # check formatting for the latest release but avoid failing the build
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
        continue-on-error: true
      - name: validate terraform
        run: terraform validate

  verify_examples:
    name: Verify examples
    strategy:
      fail-fast: false
      matrix:
        terraform: [1.1.6, "latest"]
        example: ["default"]
    defaults:
      run:
        working-directory: examples/${{ matrix.example }}
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:${{ matrix.terraform }}
    steps:
      - uses: actions/checkout@v4
      - name: terraform init
        run: terraform init -get -backend=false -input=false
      - if: contains(matrix.terraform, '1.1.')
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
      - if: contains(matrix.terraform, 'latest') # check formatting for the latest release but avoid failing the build
        name: check terraform formatting
        run: terraform fmt -recursive -check=true -write=false
        continue-on-error: true
      - name: validate terraform
        run: terraform validate
